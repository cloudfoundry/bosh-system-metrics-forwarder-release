commit: |
  #!/bin/bash
  set -ex
  pushd "${SOURCE}"
    if [ ! "$(git status --porcelain)" = "" ]; then
      git config user.email "pcf-denver-eng+system-metrics-ci-bot@pivotal.io"
      git config user.name "System Metrics CI"
      git add ${PATHS}
      git commit -m "${COMMIT_MESSAGE}"
    else
      echo "No changes to commit"
    fi
  popd
  cp -r "${SOURCE}/." "${OUTPUT}/"

create-final-release: |
  #!/bin/bash

  set -e -x

  new_version=$(cat version/version)
  tag_name="v$new_version"

  # write out github release files
  echo "${RELEASE_NAME} v${new_version}" > github-release/name
  echo $tag_name > github-release/tag
  echo "TBD" > github-release/body

  pushd $RELEASE
    cat << EOF > config/private.yml
  ---
  blobstore:
    provider: s3
    options:
      bucket_name: ${S3_BUCKET}
      access_key_id: ${S3_ACCESS_KEY}
      secret_access_key: ${S3_SECRET_KEY}
  EOF

    bosh -n create-release --sha2 --final \
      --tarball ../github-release/${RELEASE_NAME}-${new_version}.tgz \
      --version "$new_version"
    git config user.email "pcf-denver-eng+system-metrics-ci-bot@pivotal.io"
    git config user.name "System Metrics CI"
    git add .
    git commit -m "Create final release\

    [ci skip]"
  popd

  cp -r "${RELEASE}/." "${OUTPUT}/"

create-acceptance-bosh-lite-with-metrics-server: |
  #!/bin/bash
  set -ex

  ENV_DIR=${DEPLOY_DIR}/${ENV_NAME}

  # ENV CLEANUP
  rm -f /tmp/server-release.tgz
  bosh delete-env bosh-deployment/bosh.yml \
    --state ${ENV_DIR}/state.json \
    --vars-store ${ENV_DIR}/creds.yml \
    --var-file gcp_credentials_json=deployments-metrics/bosh-lites/bosh-system-metrics/service-account.key.json \
    -o bosh-deployment/gcp/cpi.yml \
    -o bosh-deployment/bosh-lite.yml \
    -o bosh-deployment/external-ip-not-recommended.yml \
    -o bosh-deployment/gcp/bosh-lite-vm-type.yml \
    -o bosh-deployment/jumpbox-user.yml \
    -o bosh-deployment/bosh-lite-runc.yml \
    -o bosh-deployment/uaa.yml \
    -o bosh-deployment/external-ip-not-recommended-uaa.yml \
    -o bosh-system-metrics-server-release/manifests/server-ops.yml \
    -o deployments-metrics/bosh-lites/bosh-system-metrics/acceptance/ops.yml

  pushd system-metrics-bosh
   bosh create-release --tarball /tmp/bosh-release.tgz
  popd

  pushd bosh-system-metrics-server-release
  # We need this config so the bosh cli can download blobs
    cat << EOF > config/private.yml
  ---
  blobstore:
    provider: s3
    options:
      bucket_name: ${S3_BUCKET}
      access_key_id: ${S3_ACCESS_KEY}
      secret_access_key: ${S3_SECRET_KEY}
  EOF
    bosh create-release --tarball /tmp/server-release.tgz
  popd

  # create director
  echo "project_id: cf-metrics-release-metrics" >> ${ENV_DIR}/creds.yml
  echo "zone: us-west1-a" >> ${ENV_DIR}/creds.yml
  echo "director_name: Bosh Lite Director" >> ${ENV_DIR}/creds.yml
  echo "external_ip: ${DIRECTOR_IP}" >> ${ENV_DIR}/creds.yml
  echo "network: system-metrics-lite" >> ${ENV_DIR}/creds.yml
  echo "subnetwork: ${SUBNETWORK}" >> ${ENV_DIR}/creds.yml
  echo "internal_cidr: ${SUBNET_PREFIX}.0/24" >> ${ENV_DIR}/creds.yml
  echo "internal_gw: ${SUBNET_PREFIX}.1" >> ${ENV_DIR}/creds.yml
  echo "internal_ip: ${SUBNET_PREFIX}.6" >> ${ENV_DIR}/creds.yml
  echo "tags: [bosh,bosh-system-metrics-${ENV_NAME}]" >> ${ENV_DIR}/creds.yml
  echo "datadog_api: https://app.datadoghq.com/api/v1/series" >> ${ENV_DIR}/creds.yml
  echo "datadog_key: ${DATADOG_API_KEY}" >> ${ENV_DIR}/creds.yml
  echo "datadog_app_key: ${DATADOG_APP_KEY}" >> ${ENV_DIR}/creds.yml

  bosh create-env bosh-deployment/bosh.yml \
    --state ${ENV_DIR}/state.json \
    --vars-store ${ENV_DIR}/creds.yml \
    --var-file gcp_credentials_json=deployments-metrics/bosh-lites/bosh-system-metrics/service-account.key.json \
    -o bosh-deployment/gcp/cpi.yml \
    -o bosh-deployment/bosh-lite.yml \
    -o bosh-deployment/external-ip-not-recommended.yml \
    -o bosh-deployment/gcp/bosh-lite-vm-type.yml \
    -o bosh-deployment/jumpbox-user.yml \
    -o bosh-deployment/bosh-lite-runc.yml \
    -o bosh-deployment/uaa.yml \
    -o bosh-deployment/external-ip-not-recommended-uaa.yml \
    -o bosh-system-metrics-server-release/manifests/server-ops.yml \
    -o ${ENV_DIR}/ops.yml

  # upload stemcell needed for bosh-lite "vms"
  bosh alias-env lite -e ${DIRECTOR_IP} --ca-cert <(bosh interpolate ${ENV_DIR}/creds.yml --path /director_ssl/ca)
  export BOSH_CLIENT=admin
  export BOSH_CLIENT_SECRET=$(bosh interpolate ${ENV_DIR}/creds.yml --path /admin_password)
  bosh -e lite upload-stemcell https://bosh.io/d/stemcells/bosh-warden-boshlite-ubuntu-trusty-go_agent

  # update runtime config for bosh dns
  bosh -e lite -n update-runtime-config bosh-bootloader/storage/fixtures/upped/bosh-deployment/runtime-configs/dns.yml \
    --name dns \
    --vars-store ${ENV_DIR}/creds.yml

  # update cloud config
  bosh -e lite -n update-cloud-config bosh-deployment/gcp/cloud-config.yml \
    --vars-store ${ENV_DIR}/creds.yml

  rsync -ac deployments-metrics/ updated-deployments-metrics

create-ci-bosh-lite-with-metrics-server: |
  #!/bin/bash
  set -ex

  ENV_DIR=${DEPLOY_DIR}/${ENV_NAME}

  if [ -f ${ENV_DIR}/state.json ]; then
    echo Deploy already exists, delete it first
    exit 1
  fi

  rm -f /tmp/server-release.tgz

  pushd bosh-system-metrics-server-release

  # We need this config so the bosh cli can download blobs
    cat << EOF > config/private.yml
  ---
  blobstore:
    provider: s3
    options:
      bucket_name: ${S3_BUCKET}
      access_key_id: ${S3_ACCESS_KEY}
      secret_access_key: ${S3_SECRET_KEY}
  EOF
    bosh create-release --tarball /tmp/server-release.tgz
  popd

  # create director
  echo "project_id: cf-metrics-release-metrics" >> ${ENV_DIR}/creds.yml
  echo "zone: us-west1-a" >> ${ENV_DIR}/creds.yml
  echo "director_name: Bosh Lite Director" >> ${ENV_DIR}/creds.yml
  echo "external_ip: ${DIRECTOR_IP}" >> ${ENV_DIR}/creds.yml
  echo "network: system-metrics-lite" >> ${ENV_DIR}/creds.yml
  echo "subnetwork: ${SUBNETWORK}" >> ${ENV_DIR}/creds.yml
  echo "internal_cidr: ${SUBNET_PREFIX}.0/24" >> ${ENV_DIR}/creds.yml
  echo "internal_gw: ${SUBNET_PREFIX}.1" >> ${ENV_DIR}/creds.yml
  echo "internal_ip: ${SUBNET_PREFIX}.6" >> ${ENV_DIR}/creds.yml
  echo "tags: [bosh,bosh-system-metrics-${ENV_NAME}]" >> ${ENV_DIR}/creds.yml

  bosh create-env bosh-deployment/bosh.yml \
    --state ${ENV_DIR}/state.json \
    --vars-store ${ENV_DIR}/creds.yml \
    --var-file gcp_credentials_json=deployments-metrics/bosh-lites/bosh-system-metrics/service-account.key.json \
    -o bosh-deployment/gcp/cpi.yml \
    -o bosh-deployment/bosh-lite.yml \
    -o bosh-deployment/external-ip-not-recommended.yml \
    -o bosh-deployment/gcp/bosh-lite-vm-type.yml \
    -o bosh-deployment/jumpbox-user.yml \
    -o bosh-deployment/bosh-lite-runc.yml \
    -o bosh-deployment/uaa.yml \
    -o bosh-deployment/external-ip-not-recommended-uaa.yml \
    -o bosh-system-metrics-server-release/manifests/server-ops.yml

  # upload stemcell needed for bosh-lite "vms"
  bosh alias-env lite -e ${DIRECTOR_IP} --ca-cert <(bosh interpolate ${ENV_DIR}/creds.yml --path /director_ssl/ca)
  export BOSH_CLIENT=admin
  export BOSH_CLIENT_SECRET=$(bosh interpolate ${ENV_DIR}/creds.yml --path /admin_password)
  bosh -e lite upload-stemcell https://bosh.io/d/stemcells/bosh-warden-boshlite-ubuntu-trusty-go_agent

  # update runtime config for bosh dns
  bosh -e lite -n update-runtime-config bosh-bootloader/storage/fixtures/upped/bosh-deployment/runtime-configs/dns.yml \
    --name dns \
    --vars-store ${ENV_DIR}/creds.yml

  # update cloud config
  bosh -e lite -n update-cloud-config bosh-deployment/gcp/cloud-config.yml \
    --vars-store ${ENV_DIR}/creds.yml

  rsync -ac deployments-metrics/ updated-deployments-metrics

deploy-loggregator-with-metrics-forwarder: |
  #!/bin/bash
  set -eux
  ENV_DIR=${DEPLOY_DIR}/${ENV_NAME}
  pushd ${ENV_DIR}
    export BOSH_CLIENT=admin
    export BOSH_CLIENT_SECRET=$(bosh interpolate creds.yml --path /admin_password)
    bosh interpolate creds.yml --path /director_ssl/ca > /tmp/bosh-ca.crt
    export BOSH_CA_CERT=/tmp/bosh-ca.crt
    export BOSH_ENVIRONMENT="https://${DIRECTOR_IP}:25555"
  popd

  for release in $(find bosh-dns-release -name '*.tgz')
  do
    bosh upload-release $release
  done

  pushd loggregator-repo
    bosh create-release --force
    bosh upload-release --rebase
  popd

  forwarder_release_dir=$PWD/bosh-system-metrics-forwarder-release
  pushd $forwarder_release_dir
    cat << EOF > config/private.yml
  ---
  blobstore:
    provider: s3
    options:
      bucket_name: ${S3_BUCKET}
      access_key_id: ${S3_ACCESS_KEY}
      secret_access_key: ${S3_SECRET_KEY}
  EOF
    bosh create-release
    bosh upload-release --rebase
  popd

  # delete loggregator deployment as part of responsible cleanup. Also to
  # avoid unresponsive_agent errors from bosh.
  echo "Deleting loggregator deployment"
  bosh -d loggregator delete-deployment --force -n

  cat << EOF > loggregator-vm-default.yml
  - type: replace
    path: /instance_groups/name=log-cache/vm_type
    value: default
  - type: replace
    path: /instance_groups/name=doppler/vm_type
    value: default
  - type: replace
    path: /instance_groups/name=log-api/vm_type
    value: default
  EOF

  loggregator_dir="$PWD/loggregator-repo"
  bosh -n -d loggregator deploy \
    --vars-store "${ENV_DIR}/creds.yml" \
    -o "${DEPLOY_DIR}/loggregator-ops.yml" \
    -o "$forwarder_release_dir/manifests/bosh-system-metrics-forwarder-ops.yml" \
    -o "loggregator-vm-default.yml" \
    "$loggregator_dir/manifests/loggregator.yml"

  rsync -ac deployments-metrics/ updated-deployments-metrics
