// Code generated by protoc-gen-go. DO NOT EDIT.
// source: events.proto

/*
Package definitions is a generated protocol buffer package.

It is generated from these files:
	events.proto
	server.proto

It has these top-level messages:
	Event
	Heartbeat
	Alert
	EgressRequest
*/
package definitions

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event struct {
	Timestamp  int64  `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
	Id         string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Deployment string `protobuf:"bytes,3,opt,name=deployment" json:"deployment,omitempty"`
	// Types that are valid to be assigned to Message:
	//	*Event_Heartbeat
	//	*Event_Alert
	Message isEvent_Message `protobuf_oneof:"message"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isEvent_Message interface {
	isEvent_Message()
}

type Event_Heartbeat struct {
	Heartbeat *Heartbeat `protobuf:"bytes,4,opt,name=heartbeat,oneof"`
}
type Event_Alert struct {
	Alert *Alert `protobuf:"bytes,5,opt,name=alert,oneof"`
}

func (*Event_Heartbeat) isEvent_Message() {}
func (*Event_Alert) isEvent_Message()     {}

func (m *Event) GetMessage() isEvent_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Event) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Event) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Event) GetDeployment() string {
	if m != nil {
		return m.Deployment
	}
	return ""
}

func (m *Event) GetHeartbeat() *Heartbeat {
	if x, ok := m.GetMessage().(*Event_Heartbeat); ok {
		return x.Heartbeat
	}
	return nil
}

func (m *Event) GetAlert() *Alert {
	if x, ok := m.GetMessage().(*Event_Alert); ok {
		return x.Alert
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Event) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Event_OneofMarshaler, _Event_OneofUnmarshaler, _Event_OneofSizer, []interface{}{
		(*Event_Heartbeat)(nil),
		(*Event_Alert)(nil),
	}
}

func _Event_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Event)
	// message
	switch x := m.Message.(type) {
	case *Event_Heartbeat:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Heartbeat); err != nil {
			return err
		}
	case *Event_Alert:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Alert); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Event.Message has unexpected type %T", x)
	}
	return nil
}

func _Event_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Event)
	switch tag {
	case 4: // message.heartbeat
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Heartbeat)
		err := b.DecodeMessage(msg)
		m.Message = &Event_Heartbeat{msg}
		return true, err
	case 5: // message.alert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Alert)
		err := b.DecodeMessage(msg)
		m.Message = &Event_Alert{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Event_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Event)
	// message
	switch x := m.Message.(type) {
	case *Event_Heartbeat:
		s := proto.Size(x.Heartbeat)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_Alert:
		s := proto.Size(x.Alert)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Heartbeat struct {
	AgentId    string              `protobuf:"bytes,1,opt,name=agent_id,json=agentId" json:"agent_id,omitempty"`
	Job        string              `protobuf:"bytes,2,opt,name=job" json:"job,omitempty"`
	Index      int32               `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
	InstanceId string              `protobuf:"bytes,4,opt,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	JobState   string              `protobuf:"bytes,5,opt,name=job_state,json=jobState" json:"job_state,omitempty"`
	Vitals     *Heartbeat_Vitals   `protobuf:"bytes,6,opt,name=vitals" json:"vitals,omitempty"`
	Metrics    []*Heartbeat_Metric `protobuf:"bytes,7,rep,name=metrics" json:"metrics,omitempty"`
}

func (m *Heartbeat) Reset()                    { *m = Heartbeat{} }
func (m *Heartbeat) String() string            { return proto.CompactTextString(m) }
func (*Heartbeat) ProtoMessage()               {}
func (*Heartbeat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Heartbeat) GetAgentId() string {
	if m != nil {
		return m.AgentId
	}
	return ""
}

func (m *Heartbeat) GetJob() string {
	if m != nil {
		return m.Job
	}
	return ""
}

func (m *Heartbeat) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Heartbeat) GetInstanceId() string {
	if m != nil {
		return m.InstanceId
	}
	return ""
}

func (m *Heartbeat) GetJobState() string {
	if m != nil {
		return m.JobState
	}
	return ""
}

func (m *Heartbeat) GetVitals() *Heartbeat_Vitals {
	if m != nil {
		return m.Vitals
	}
	return nil
}

func (m *Heartbeat) GetMetrics() []*Heartbeat_Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type Heartbeat_Vitals struct {
	Cpu  *Heartbeat_Vitals_Cpu      `protobuf:"bytes,1,opt,name=cpu" json:"cpu,omitempty"`
	Disk *Heartbeat_Vitals_Disk     `protobuf:"bytes,2,opt,name=disk" json:"disk,omitempty"`
	Load []float32                  `protobuf:"fixed32,3,rep,packed,name=load" json:"load,omitempty"`
	Mem  *Heartbeat_Vitals_MemUsage `protobuf:"bytes,4,opt,name=mem" json:"mem,omitempty"`
	Swap *Heartbeat_Vitals_MemUsage `protobuf:"bytes,5,opt,name=swap" json:"swap,omitempty"`
}

func (m *Heartbeat_Vitals) Reset()                    { *m = Heartbeat_Vitals{} }
func (m *Heartbeat_Vitals) String() string            { return proto.CompactTextString(m) }
func (*Heartbeat_Vitals) ProtoMessage()               {}
func (*Heartbeat_Vitals) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Heartbeat_Vitals) GetCpu() *Heartbeat_Vitals_Cpu {
	if m != nil {
		return m.Cpu
	}
	return nil
}

func (m *Heartbeat_Vitals) GetDisk() *Heartbeat_Vitals_Disk {
	if m != nil {
		return m.Disk
	}
	return nil
}

func (m *Heartbeat_Vitals) GetLoad() []float32 {
	if m != nil {
		return m.Load
	}
	return nil
}

func (m *Heartbeat_Vitals) GetMem() *Heartbeat_Vitals_MemUsage {
	if m != nil {
		return m.Mem
	}
	return nil
}

func (m *Heartbeat_Vitals) GetSwap() *Heartbeat_Vitals_MemUsage {
	if m != nil {
		return m.Swap
	}
	return nil
}

type Heartbeat_Vitals_Cpu struct {
	Sys  float32 `protobuf:"fixed32,1,opt,name=sys" json:"sys,omitempty"`
	User float32 `protobuf:"fixed32,2,opt,name=user" json:"user,omitempty"`
	Wait float32 `protobuf:"fixed32,3,opt,name=wait" json:"wait,omitempty"`
}

func (m *Heartbeat_Vitals_Cpu) Reset()                    { *m = Heartbeat_Vitals_Cpu{} }
func (m *Heartbeat_Vitals_Cpu) String() string            { return proto.CompactTextString(m) }
func (*Heartbeat_Vitals_Cpu) ProtoMessage()               {}
func (*Heartbeat_Vitals_Cpu) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0, 0} }

func (m *Heartbeat_Vitals_Cpu) GetSys() float32 {
	if m != nil {
		return m.Sys
	}
	return 0
}

func (m *Heartbeat_Vitals_Cpu) GetUser() float32 {
	if m != nil {
		return m.User
	}
	return 0
}

func (m *Heartbeat_Vitals_Cpu) GetWait() float32 {
	if m != nil {
		return m.Wait
	}
	return 0
}

type Heartbeat_Vitals_Disk struct {
	Ephemeral  *Heartbeat_Vitals_Disk_DiskUsage `protobuf:"bytes,1,opt,name=ephemeral" json:"ephemeral,omitempty"`
	Persistent *Heartbeat_Vitals_Disk_DiskUsage `protobuf:"bytes,2,opt,name=persistent" json:"persistent,omitempty"`
	System     *Heartbeat_Vitals_Disk_DiskUsage `protobuf:"bytes,3,opt,name=system" json:"system,omitempty"`
}

func (m *Heartbeat_Vitals_Disk) Reset()                    { *m = Heartbeat_Vitals_Disk{} }
func (m *Heartbeat_Vitals_Disk) String() string            { return proto.CompactTextString(m) }
func (*Heartbeat_Vitals_Disk) ProtoMessage()               {}
func (*Heartbeat_Vitals_Disk) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0, 1} }

func (m *Heartbeat_Vitals_Disk) GetEphemeral() *Heartbeat_Vitals_Disk_DiskUsage {
	if m != nil {
		return m.Ephemeral
	}
	return nil
}

func (m *Heartbeat_Vitals_Disk) GetPersistent() *Heartbeat_Vitals_Disk_DiskUsage {
	if m != nil {
		return m.Persistent
	}
	return nil
}

func (m *Heartbeat_Vitals_Disk) GetSystem() *Heartbeat_Vitals_Disk_DiskUsage {
	if m != nil {
		return m.System
	}
	return nil
}

type Heartbeat_Vitals_Disk_DiskUsage struct {
	InodePercent float32 `protobuf:"fixed32,1,opt,name=inode_percent,json=inodePercent" json:"inode_percent,omitempty"`
	Percent      float32 `protobuf:"fixed32,2,opt,name=percent" json:"percent,omitempty"`
}

func (m *Heartbeat_Vitals_Disk_DiskUsage) Reset()         { *m = Heartbeat_Vitals_Disk_DiskUsage{} }
func (m *Heartbeat_Vitals_Disk_DiskUsage) String() string { return proto.CompactTextString(m) }
func (*Heartbeat_Vitals_Disk_DiskUsage) ProtoMessage()    {}
func (*Heartbeat_Vitals_Disk_DiskUsage) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 0, 1, 0}
}

func (m *Heartbeat_Vitals_Disk_DiskUsage) GetInodePercent() float32 {
	if m != nil {
		return m.InodePercent
	}
	return 0
}

func (m *Heartbeat_Vitals_Disk_DiskUsage) GetPercent() float32 {
	if m != nil {
		return m.Percent
	}
	return 0
}

type Heartbeat_Vitals_MemUsage struct {
	Kb      int64   `protobuf:"varint,1,opt,name=kb" json:"kb,omitempty"`
	Percent float32 `protobuf:"fixed32,2,opt,name=percent" json:"percent,omitempty"`
}

func (m *Heartbeat_Vitals_MemUsage) Reset()                    { *m = Heartbeat_Vitals_MemUsage{} }
func (m *Heartbeat_Vitals_MemUsage) String() string            { return proto.CompactTextString(m) }
func (*Heartbeat_Vitals_MemUsage) ProtoMessage()               {}
func (*Heartbeat_Vitals_MemUsage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0, 2} }

func (m *Heartbeat_Vitals_MemUsage) GetKb() int64 {
	if m != nil {
		return m.Kb
	}
	return 0
}

func (m *Heartbeat_Vitals_MemUsage) GetPercent() float32 {
	if m != nil {
		return m.Percent
	}
	return 0
}

type Heartbeat_Metric struct {
	Name      string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value     float64           `protobuf:"fixed64,2,opt,name=value" json:"value,omitempty"`
	Timestamp int64             `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Tags      map[string]string `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Heartbeat_Metric) Reset()                    { *m = Heartbeat_Metric{} }
func (m *Heartbeat_Metric) String() string            { return proto.CompactTextString(m) }
func (*Heartbeat_Metric) ProtoMessage()               {}
func (*Heartbeat_Metric) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 1} }

func (m *Heartbeat_Metric) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Heartbeat_Metric) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Heartbeat_Metric) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Heartbeat_Metric) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type Alert struct {
	Severity int32  `protobuf:"varint,1,opt,name=severity" json:"severity,omitempty"`
	Category string `protobuf:"bytes,2,opt,name=category" json:"category,omitempty"`
	Title    string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Summary  string `protobuf:"bytes,4,opt,name=summary" json:"summary,omitempty"`
	Source   string `protobuf:"bytes,5,opt,name=source" json:"source,omitempty"`
}

func (m *Alert) Reset()                    { *m = Alert{} }
func (m *Alert) String() string            { return proto.CompactTextString(m) }
func (*Alert) ProtoMessage()               {}
func (*Alert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Alert) GetSeverity() int32 {
	if m != nil {
		return m.Severity
	}
	return 0
}

func (m *Alert) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *Alert) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Alert) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *Alert) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func init() {
	proto.RegisterType((*Event)(nil), "definitions.Event")
	proto.RegisterType((*Heartbeat)(nil), "definitions.Heartbeat")
	proto.RegisterType((*Heartbeat_Vitals)(nil), "definitions.Heartbeat.Vitals")
	proto.RegisterType((*Heartbeat_Vitals_Cpu)(nil), "definitions.Heartbeat.Vitals.Cpu")
	proto.RegisterType((*Heartbeat_Vitals_Disk)(nil), "definitions.Heartbeat.Vitals.Disk")
	proto.RegisterType((*Heartbeat_Vitals_Disk_DiskUsage)(nil), "definitions.Heartbeat.Vitals.Disk.DiskUsage")
	proto.RegisterType((*Heartbeat_Vitals_MemUsage)(nil), "definitions.Heartbeat.Vitals.MemUsage")
	proto.RegisterType((*Heartbeat_Metric)(nil), "definitions.Heartbeat.Metric")
	proto.RegisterType((*Alert)(nil), "definitions.Alert")
}

func init() { proto.RegisterFile("events.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 690 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xdb, 0x6e, 0xd3, 0x4c,
	0x10, 0xae, 0x4f, 0x49, 0x3c, 0xe9, 0xff, 0x0b, 0xad, 0x50, 0x65, 0xcc, 0x29, 0x04, 0x09, 0x22,
	0x84, 0x72, 0xd1, 0x42, 0x5b, 0x95, 0x0b, 0x04, 0x6d, 0xa5, 0xb6, 0xa2, 0x12, 0x5a, 0x0e, 0xb7,
	0xd5, 0x3a, 0x1e, 0xd2, 0x6d, 0x7c, 0x92, 0x77, 0x9d, 0xe2, 0x27, 0xe0, 0x61, 0xb8, 0xe3, 0x19,
	0x10, 0x2f, 0xc4, 0x0b, 0xa0, 0x5d, 0xaf, 0xd3, 0x16, 0xa1, 0x70, 0xb8, 0xb1, 0xe6, 0x9b, 0x9d,
	0x6f, 0x3c, 0xdf, 0xcc, 0xee, 0xc0, 0x2a, 0xce, 0x31, 0x93, 0x62, 0x5c, 0x94, 0xb9, 0xcc, 0x49,
	0x3f, 0xc6, 0x0f, 0x3c, 0xe3, 0x92, 0xe7, 0x99, 0x18, 0x7e, 0xb5, 0xc0, 0xdb, 0x57, 0xa7, 0xe4,
	0x16, 0xf8, 0x92, 0xa7, 0x28, 0x24, 0x4b, 0x8b, 0xc0, 0x1a, 0x58, 0x23, 0x87, 0x5e, 0x38, 0xc8,
	0xff, 0x60, 0xf3, 0x38, 0xb0, 0x07, 0xd6, 0xc8, 0xa7, 0x36, 0x8f, 0xc9, 0x1d, 0x80, 0x18, 0x8b,
	0x24, 0xaf, 0x53, 0xcc, 0x64, 0xe0, 0x68, 0xff, 0x25, 0x0f, 0xd9, 0x04, 0xff, 0x14, 0x59, 0x29,
	0x23, 0x64, 0x32, 0x70, 0x07, 0xd6, 0xa8, 0xbf, 0xbe, 0x36, 0xbe, 0xf4, 0xe3, 0xf1, 0x41, 0x7b,
	0x7a, 0xb0, 0x42, 0x2f, 0x42, 0xc9, 0x23, 0xf0, 0x58, 0x82, 0xa5, 0x0c, 0x3c, 0xcd, 0x21, 0x57,
	0x38, 0x2f, 0xd4, 0xc9, 0xc1, 0x0a, 0x6d, 0x42, 0x5e, 0xfa, 0xd0, 0x4d, 0x51, 0x08, 0x36, 0xc5,
	0xe1, 0xf7, 0x1e, 0xf8, 0x8b, 0x8c, 0xe4, 0x06, 0xf4, 0xd8, 0x14, 0x33, 0x79, 0xc2, 0x63, 0xad,
	0xc4, 0xa7, 0x5d, 0x8d, 0x0f, 0x63, 0x72, 0x0d, 0x9c, 0xb3, 0x3c, 0x32, 0x42, 0x94, 0x49, 0xae,
	0x83, 0xc7, 0xb3, 0x18, 0x3f, 0x6a, 0x11, 0x1e, 0x6d, 0x00, 0xb9, 0x0b, 0x7d, 0x9e, 0x09, 0xc9,
	0xb2, 0x09, 0xaa, 0x2c, 0x6e, 0x23, 0xb0, 0x75, 0x1d, 0xc6, 0xe4, 0x26, 0xf8, 0x67, 0x79, 0x74,
	0x22, 0x24, 0x93, 0xa8, 0x8b, 0xf5, 0x69, 0xef, 0x2c, 0x8f, 0xde, 0x28, 0x4c, 0x9e, 0x42, 0x67,
	0xce, 0x25, 0x4b, 0x44, 0xd0, 0xd1, 0x32, 0x6e, 0xff, 0x5a, 0xfa, 0xf8, 0xbd, 0x0e, 0xa2, 0x26,
	0x98, 0x6c, 0x29, 0x41, 0xb2, 0xe4, 0x13, 0x11, 0x74, 0x07, 0xce, 0x12, 0xde, 0xb1, 0x8e, 0xa2,
	0x6d, 0x74, 0xf8, 0xd9, 0x83, 0x4e, 0x93, 0x8b, 0x6c, 0x80, 0x33, 0x29, 0x2a, 0x2d, 0xbb, 0xbf,
	0x7e, 0x6f, 0xe9, 0x7f, 0xc7, 0xbb, 0x45, 0x45, 0x55, 0x34, 0xd9, 0x04, 0x37, 0xe6, 0x62, 0xa6,
	0xdb, 0xd2, 0x5f, 0x1f, 0x2e, 0x67, 0xed, 0x71, 0x31, 0xa3, 0x3a, 0x9e, 0x10, 0x70, 0x93, 0x9c,
	0xc5, 0x81, 0x33, 0x70, 0x46, 0x36, 0xd5, 0x36, 0xd9, 0x06, 0x27, 0xc5, 0xd4, 0xcc, 0xfc, 0xc1,
	0xf2, 0x54, 0xc7, 0x98, 0xbe, 0x53, 0xf3, 0xa3, 0x8a, 0x42, 0x76, 0xc0, 0x15, 0xe7, 0xac, 0x30,
	0xa3, 0xff, 0x53, 0xaa, 0xe6, 0x84, 0xcf, 0xc1, 0xd9, 0x2d, 0x2a, 0x35, 0x5e, 0x51, 0x0b, 0xad,
	0xde, 0xa6, 0xca, 0x54, 0x25, 0x56, 0x02, 0x4b, 0x2d, 0xcd, 0xa6, 0xda, 0x56, 0xbe, 0x73, 0xc6,
	0x9b, 0x6b, 0x6b, 0x53, 0x6d, 0x87, 0x5f, 0x6c, 0x70, 0x95, 0x32, 0x72, 0x04, 0x3e, 0x16, 0xa7,
	0x98, 0x62, 0xc9, 0x12, 0xd3, 0xc6, 0xc7, 0xbf, 0x6f, 0x88, 0xfe, 0x34, 0x05, 0x5d, 0xd0, 0xc9,
	0x2b, 0x80, 0x02, 0x4b, 0xc1, 0x85, 0x54, 0xaf, 0xc4, 0xfe, 0x87, 0x64, 0x97, 0xf8, 0x64, 0x0f,
	0x3a, 0xa2, 0x16, 0x12, 0x53, 0x5d, 0xf8, 0xdf, 0x66, 0x32, 0xdc, 0xf0, 0x08, 0xfc, 0x85, 0x93,
	0xdc, 0x87, 0xff, 0x78, 0x96, 0xc7, 0x78, 0x52, 0x60, 0x39, 0x51, 0x35, 0x36, 0x9d, 0x5b, 0xd5,
	0xce, 0xd7, 0x8d, 0x8f, 0x04, 0xd0, 0x6d, 0x8f, 0x9b, 0x2e, 0xb6, 0x30, 0x7c, 0x02, 0xbd, 0x76,
	0x0e, 0x6a, 0x43, 0xcc, 0x22, 0xb3, 0x38, 0xec, 0x59, 0xb4, 0x84, 0xf5, 0xcd, 0x82, 0x4e, 0x73,
	0x83, 0xd5, 0x24, 0x32, 0x96, 0xa2, 0x79, 0xa5, 0xda, 0x56, 0x0f, 0x72, 0xce, 0x92, 0x0a, 0x35,
	0xcd, 0xa2, 0x0d, 0xb8, 0xba, 0x9e, 0x9c, 0x9f, 0xd7, 0xd3, 0x33, 0x70, 0x25, 0x9b, 0x8a, 0xc0,
	0xd5, 0xcf, 0xe6, 0xe1, 0xd2, 0x67, 0x33, 0x7e, 0xcb, 0xa6, 0x62, 0x3f, 0x93, 0x65, 0x4d, 0x35,
	0x29, 0xdc, 0x02, 0x7f, 0xe1, 0x52, 0x37, 0x68, 0x86, 0xb5, 0x29, 0x48, 0x99, 0x57, 0xeb, 0xf1,
	0x4d, 0x3d, 0x3b, 0xf6, 0xb6, 0x35, 0xfc, 0x64, 0x81, 0xa7, 0x77, 0x12, 0x09, 0xa1, 0x27, 0x70,
	0x8e, 0x25, 0x97, 0x0d, 0xd5, 0xa3, 0x0b, 0xac, 0xce, 0x26, 0x4c, 0xe2, 0x34, 0x2f, 0x6b, 0x93,
	0x62, 0x81, 0x55, 0x6e, 0xc9, 0x65, 0x82, 0x66, 0x83, 0x36, 0x40, 0xb5, 0x4e, 0x54, 0x69, 0xca,
	0xca, 0xda, 0x2c, 0x9e, 0x16, 0x92, 0x35, 0xe8, 0x88, 0xbc, 0x2a, 0x27, 0xed, 0xca, 0x31, 0x28,
	0xea, 0xe8, 0xd5, 0xbe, 0xf1, 0x23, 0x00, 0x00, 0xff, 0xff, 0xa6, 0x73, 0xce, 0x18, 0xea, 0x05,
	0x00, 0x00,
}
